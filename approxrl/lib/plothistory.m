function figh = plothistory(hist)
% Utility function to plot controlled trajectory of a system
%   FIGH = PLOTHISTORY(HIST)
% Parameters:
%   HIST    - the history as generated by fuzzyqi, tilingqi, etc.
% Returns:
%   FIGH    - a handle to the created figure

% number of states and inputs
p = size(hist.x, 1);
q = size(hist.u, 1);

Ns = size(hist.x, 2);       % number of samples
% if fewer than 40 samples, plot in stairs, otherwise in continuous lines
if Ns <= 40, plotfun = @stairs;
else plotfun = @plot;
end;
% note commands are always plotted in stairs

figsize = [500 800]; 
styles = {{'k-','LineWidth',2,'Color',[.6,.6,.6]}, {'k-','LineWidth',1}, ...
    {'k:','LineWidth',1}, {'k--','LineWidth',1}, {'r--','LineWidth',1}};      % b/w styles
figh = figure('Name', 'Controlled system evolution', 'NumberTitle','off', 'Position', [0 0 figsize]);
movegui(figh, 'center');
% states
subplot(311); hold on; leg = {};
for i = 1:p
    si = mod(i, length(styles)) + 1;
    feval(plotfun, hist.t, hist.x(i, :), styles{si}{:}); 
    leg{end+1} = ['x_' num2str(i) '(t)'];
end;
% grid on;
if p > 1,   legend(leg); ylabel('States');
else        ylabel('State x(t)');
end;

subplot(312); hold on; leg = {};
for i = 1:q
    si = mod(i, length(styles)) + 1;
    stairs(hist.t, hist.u(i, :), styles{si}{:}); 
    leg{end+1} = ['u_' num2str(i) '(t)'];
end;
% grid on; 
if q > 1,   legend(leg); ylabel('Controls');
else        ylabel('Control u(t)');
end;
% reward
subplot(313); hold on; feval(plotfun, hist.t, hist.r, styles{1}{:});
% grid on; 
ylabel('Reward');
xlabel('t [sec]');          % last plot, put an x label
